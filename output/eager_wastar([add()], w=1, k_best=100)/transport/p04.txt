INFO     planner time limit: 600s
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 599s
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /mnt/c/Alvaro/Universidad/PlanningFinalProject/downward/builds/release/bin/translate/translate.py transport/domain.pddl transport/p04.pddl --sas-file 'output/eager_wastar([add()], w=1, k_best=100)/transport/p04.txt.sas'
Parsing...
Parsing: [0.010s CPU, 0.013s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.015s wall-clock]
Preparing model... [0.000s CPU, 0.003s wall-clock]
Generated 27 rules.
Computing model... [0.020s CPU, 0.016s wall-clock]
1293 relevant atoms
1246 auxiliary atoms
2539 final queue length
4436 total queue pushes
Completing instantiation... [0.040s CPU, 0.047s wall-clock]
Instantiating: [0.060s CPU, 0.089s wall-clock]
Computing fact groups...
Finding invariants...
9 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.001s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
0 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.003s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Processing axioms: [0.000s CPU, 0.006s wall-clock]
Translating task: [0.050s CPU, 0.055s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
9 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.024s wall-clock]
Reordering and filtering variables...
9 of 9 variables necessary.
0 of 9 mutex groups necessary.
1032 of 1032 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.009s wall-clock]
Translator variables: 9
Translator derived variables: 0
Translator facts: 104
Translator goal facts: 5
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 1032
Translator axioms: 0
Translator task size: 6094
Translator peak memory: 35348 KB
Writing output... [0.010s CPU, 0.026s wall-clock]
Done! [0.170s CPU, 0.244s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: 'output/eager_wastar([add()], w=1, k_best=100)/transport/p04.txt.sas'
INFO     search time limit: 599s
INFO     search memory limit: None
INFO     search command line string: /mnt/c/Alvaro/Universidad/PlanningFinalProject/downward/builds/release/bin/downward --search 'eager_wastar([add()], w=1, k_best=100)' --internal-plan-file sas_plan < ''"'"'output/eager_wastar([add()], w=1, k_best=100)/transport/p04.txt.sas'"'"''
[t=0.004270s, 10804 KB] reading input...
[t=0.015031s, 11060 KB] done reading input!
[t=0.018050s, 11508 KB] Simplifying 1992 unary operators... done! [1992 unary operators]
[t=0.020097s, 11508 KB] time to simplify: 0.002047s
[t=0.020361s, 11508 KB] Initializing additive heuristic...
[t=0.020484s, 11508 KB] Building successor generator...done!
[t=0.021236s, 11652 KB] peak memory difference for successor generator creation: 144 KB
[t=0.021301s, 11652 KB] time for successor generation creation: 0.000000s
[t=0.021387s, 11652 KB] Variables: 9
[t=0.021429s, 11652 KB] FactPairs: 104
[t=0.021467s, 11652 KB] Bytes per state: 8
[t=0.021504s, 11652 KB] Conducting best first search with reopening closed nodes, (real) bound = 2147483647
[t=0.021583s, 11652 KB] New best heuristic value for add: 820
[t=0.021689s, 11652 KB] g=0, 1 evaluated, 0 expanded
[t=0.021728s, 11652 KB] Initial heuristic value for add: 820
[t=0.021760s, 11652 KB] pruning method: none
[t=0.021795s, 11652 KB] New best heuristic value for add: 531
[t=0.021934s, 11652 KB] g=34, 3 evaluated, 1 expanded
[t=0.021997s, 11652 KB] New best heuristic value for add: 344
[t=0.022164s, 11652 KB] g=56, 6 evaluated, 5 expanded
[t=0.022201s, 11652 KB] New best heuristic value for add: 336
[t=0.022280s, 11652 KB] g=59, 7 evaluated, 5 expanded
[t=0.022311s, 11652 KB] New best heuristic value for add: 330
[t=0.022675s, 11652 KB] g=60, 17 evaluated, 15 expanded
[t=0.022718s, 11652 KB] New best heuristic value for add: 319
[t=0.023143s, 11652 KB] g=69, 29 evaluated, 15 expanded
[t=0.023178s, 11652 KB] New best heuristic value for add: 308
[t=0.023565s, 11652 KB] g=97, 39 evaluated, 36 expanded
[t=0.023600s, 11652 KB] New best heuristic value for add: 305
[t=0.023800s, 11652 KB] g=93, 42 evaluated, 36 expanded
[t=0.023831s, 11652 KB] New best heuristic value for add: 300
[t=0.023941s, 11652 KB] g=78, 44 evaluated, 36 expanded
[t=0.023968s, 11652 KB] New best heuristic value for add: 297
[t=0.024156s, 11652 KB] g=90, 48 evaluated, 36 expanded
[t=0.024184s, 11652 KB] New best heuristic value for add: 276
[t=0.024501s, 11652 KB] g=103, 56 evaluated, 36 expanded
[t=0.025269s, 11652 KB] New best heuristic value for add: 272
[t=0.025831s, 11652 KB] g=104, 93 evaluated, 85 expanded
[t=0.025872s, 11652 KB] New best heuristic value for add: 265
[t=0.025944s, 11652 KB] g=135, 94 evaluated, 85 expanded
[t=0.025974s, 11652 KB] New best heuristic value for add: 262
[t=0.029495s, 11652 KB] g=136, 199 evaluated, 185 expanded
[t=0.029598s, 11652 KB] New best heuristic value for add: 249
[t=0.029914s, 11652 KB] g=142, 207 evaluated, 185 expanded
[t=0.029953s, 11652 KB] New best heuristic value for add: 244
[t=0.030064s, 11652 KB] g=127, 209 evaluated, 185 expanded
[t=0.031296s, 11652 KB] New best heuristic value for add: 239
[t=0.032823s, 11652 KB] g=140, 289 evaluated, 185 expanded
[t=0.032870s, 11652 KB] New best heuristic value for add: 238
[t=0.038895s, 11652 KB] g=141, 466 evaluated, 285 expanded
[t=0.038942s, 11652 KB] New best heuristic value for add: 215
[t=0.039127s, 11652 KB] g=143, 470 evaluated, 285 expanded
[t=0.052616s, 11652 KB] New best heuristic value for add: 214
[t=0.059509s, 11652 KB] g=144, 872 evaluated, 385 expanded
[t=0.059580s, 11652 KB] New best heuristic value for add: 181
[t=0.060403s, 11652 KB] g=144, 898 evaluated, 385 expanded
[t=0.077428s, 11760 KB] New best heuristic value for add: 180
[t=0.082749s, 11760 KB] g=145, 1355 evaluated, 485 expanded
[t=0.141303s, 11760 KB] New best heuristic value for add: 166
[t=0.141557s, 11760 KB] g=204, 2585 evaluated, 685 expanded
[t=0.154481s, 11760 KB] New best heuristic value for add: 154
[t=0.158338s, 11760 KB] g=187, 2966 evaluated, 685 expanded
[t=0.162763s, 11760 KB] New best heuristic value for add: 153
[t=0.163491s, 11760 KB] g=188, 3053 evaluated, 785 expanded
[t=0.179504s, 11892 KB] New best heuristic value for add: 152
[t=0.185037s, 11892 KB] g=189, 3633 evaluated, 885 expanded
[t=0.187387s, 11892 KB] New best heuristic value for add: 143
[t=0.192049s, 11892 KB] g=247, 3864 evaluated, 885 expanded
[t=0.195416s, 11892 KB] New best heuristic value for add: 136
[t=0.198599s, 11892 KB] g=258, 4014 evaluated, 885 expanded
[t=0.212714s, 11892 KB] New best heuristic value for add: 133
[t=0.215292s, 11892 KB] g=269, 4440 evaluated, 985 expanded
[t=0.220561s, 11892 KB] New best heuristic value for add: 115
[t=0.224267s, 11892 KB] g=285, 4683 evaluated, 985 expanded
[t=0.236458s, 11892 KB] New best heuristic value for add: 109
[t=0.240926s, 11892 KB] g=285, 5125 evaluated, 1085 expanded, 1 reopened
[t=0.263864s, 11892 KB] New best heuristic value for add: 108
[t=0.264039s, 11892 KB] g=286, 5631 evaluated, 1185 expanded, 2 reopened
[t=0.281159s, 11892 KB] New best heuristic value for add: 107
[t=0.289582s, 11892 KB] g=287, 6095 evaluated, 1285 expanded, 3 reopened
[t=0.323647s, 12028 KB] New best heuristic value for add: 91
[t=0.331716s, 12028 KB] g=291, 7138 evaluated, 1485 expanded, 5 reopened
[t=0.332537s, 12028 KB] New best heuristic value for add: 81
[t=0.336227s, 12028 KB] g=321, 7251 evaluated, 1485 expanded, 8 reopened
[t=0.349556s, 12028 KB] New best heuristic value for add: 59
[t=0.352477s, 12028 KB] g=323, 7660 evaluated, 1585 expanded, 8 reopened
[t=0.357619s, 12160 KB] New best heuristic value for add: 49
[t=0.361796s, 12160 KB] g=353, 7843 evaluated, 1585 expanded, 13 reopened
[t=0.383520s, 12160 KB] New best heuristic value for add: 48
[t=0.383881s, 12160 KB] g=354, 8373 evaluated, 1685 expanded, 13 reopened
[t=0.410553s, 12160 KB] New best heuristic value for add: 47
[t=0.411750s, 12160 KB] g=355, 8909 evaluated, 1785 expanded, 13 reopened
[t=0.427395s, 12160 KB] New best heuristic value for add: 34
[t=0.427962s, 12160 KB] g=372, 9435 evaluated, 1885 expanded, 13 reopened
[t=0.435996s, 12160 KB] New best heuristic value for add: 33
[t=0.443174s, 12160 KB] g=373, 9963 evaluated, 1985 expanded, 15 reopened
[t=0.443205s, 12160 KB] New best heuristic value for add: 2
[t=0.443338s, 12160 KB] g=404, 9974 evaluated, 1985 expanded, 15 reopened
[t=0.454592s, 12160 KB] New best heuristic value for add: 1
[t=0.461940s, 12160 KB] g=405, 10488 evaluated, 2085 expanded, 15 reopened
[t=0.493665s, 12160 KB] New best heuristic value for add: 0
[t=0.495615s, 12160 KB] g=406, 11075 evaluated, 2185 expanded, 16 reopened
[t=0.517298s, 12160 KB] Solution found!
[t=0.518681s, 12160 KB] Actual search time: 0.496886s
drive truck-2 city-loc-6 city-loc-3 (34)
drive truck-2 city-loc-3 city-loc-10 (25)
pick-up truck-2 city-loc-10 package-3 capacity-3 capacity-4 (1)
drive truck-2 city-loc-10 city-loc-8 (24)
pick-up truck-2 city-loc-8 package-2 capacity-2 capacity-3 (1)
drive truck-2 city-loc-8 city-loc-7 (30)
drive truck-1 city-loc-2 city-loc-6 (19)
drive truck-1 city-loc-6 city-loc-9 (28)
drive truck-2 city-loc-7 city-loc-4 (31)
pick-up truck-2 city-loc-4 package-5 capacity-1 capacity-2 (1)
drive truck-2 city-loc-4 city-loc-5 (12)
drop truck-2 city-loc-5 package-3 capacity-1 capacity-2 (1)
drive truck-2 city-loc-5 city-loc-4 (12)
drive truck-2 city-loc-4 city-loc-1 (26)
drop truck-2 city-loc-1 package-2 capacity-2 capacity-3 (1)
pick-up truck-2 city-loc-1 package-1 capacity-2 capacity-3 (1)
drop truck-2 city-loc-1 package-5 capacity-2 capacity-3 (1)
drive truck-2 city-loc-1 city-loc-10 (33)
drive truck-2 city-loc-10 city-loc-9 (32)
drop truck-2 city-loc-9 package-1 capacity-3 capacity-4 (1)
drive truck-2 city-loc-9 city-loc-11 (24)
pick-up truck-2 city-loc-11 package-4 capacity-3 capacity-4 (1)
drive truck-2 city-loc-11 city-loc-9 (24)
drive truck-2 city-loc-9 city-loc-10 (32)
drop truck-2 city-loc-10 package-4 capacity-3 capacity-4 (1)
[t=0.518746s, 12160 KB] Plan length: 25 step(s).
[t=0.518746s, 12160 KB] Plan cost: 396
[t=0.518746s, 12160 KB] Expanded 2285 state(s).
[t=0.518746s, 12160 KB] Reopened 24 state(s).
[t=0.518746s, 12160 KB] Evaluated 11663 state(s).
[t=0.518746s, 12160 KB] Evaluations: 11663
[t=0.518746s, 12160 KB] Generated 20981 state(s).
[t=0.518746s, 12160 KB] Dead ends: 0 state(s).
[t=0.518746s, 12160 KB] Number of registered states: 11663
[t=0.518746s, 12160 KB] Int hash set load factor: 11663/16384 = 0.711853
[t=0.518746s, 12160 KB] Int hash set resizes: 14
[t=0.518746s, 12160 KB] Search time: 0.497242s
[t=0.518746s, 12160 KB] Total time: 0.518746s
Solution found.
Peak memory: 12160 KB
search exit code: 0

INFO     Planner time: 0.95s
